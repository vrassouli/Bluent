@page "/components/drawers"
@using Bluent.UI.Components.DrawerComponent
@using Bluent.UI.Demo.Pages.Components.DrawerComponents
@using Bluent.UI.Interops.Abstractions
@using System.ComponentModel.DataAnnotations
@using Bluent.UI.Services.Abstractions

<div class="p-5 py-md-10 px-md-12">
    <div class="w-100 w-md-50 m-auto">
        <h1>Drawers</h1>

        <h3>Default</h3>
        <section class="p-7 rounded-5 shadow-3">
            <Button Text="Open from Start" Appearance="ButtonAppearance.Primary" OnClick="OpenDrawerFromStart" />
            <Button Text="Open from End" Appearance="ButtonAppearance.Primary" OnClick="OpenDrawerFromEnd" />
            <Button Text="Open from Top" Appearance="ButtonAppearance.Primary" OnClick="OpenDrawerFromTop" />
            <Button Text="Open from Bottom" Appearance="ButtonAppearance.Primary" OnClick="OpenDrawerFromBottom" />
        </section>

        <h3>Modal</h3>
        <section class="p-7 rounded-5 shadow-3">
            <Checkbox @bind-Value=_modal Label="Modal with overlay" Class="d-flex" />
            <Button Text="@($"Open {(_modal ? "modal " : "")}drawer")" Appearance="ButtonAppearance.Primary" OnClick="OpenDrawerModalSwitch" />
        </section>
    </div>
</div>

@code {
    private bool _modal = true;

    [Inject] private IDrawerService DrawerService { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;

    private async Task OpenDrawerModalSwitch()
    {
        var result = await DrawerService.ShowAsync<SampleContent>("Modal switch", null, c => c.SetModal(_modal));
        if (result is null)
            _ = ToastService.ShowAsync("Dismissed", c => c.SetIntend(ToastIntend.Info));
        else if (result == true)
            _ = ToastService.ShowAsync("Continue clicked", c => c.SetIntend(ToastIntend.Success));
        else if (result == false)
            _ = ToastService.ShowAsync("Cancel clicked", c => c.SetIntend(ToastIntend.Warning));
    }

    private async Task OpenDrawerFromStart()
    {
        var result = await DrawerService.ShowAsync<SampleContent>("Start");
        if (result is null)
            _ = ToastService.ShowAsync("Dismissed", c => c.SetIntend(ToastIntend.Info));
        else if (result == true)
            _ = ToastService.ShowAsync("Continue clicked", c => c.SetIntend(ToastIntend.Success));
        else if (result == false)
            _ = ToastService.ShowAsync("Cancel clicked", c => c.SetIntend(ToastIntend.Warning));
    }

    private async Task OpenDrawerFromEnd()
    {
        var result = await DrawerService.ShowAsync<SampleContent>("End", null, c => c.SetPosition(DrawerPosition.End));
        if (result is null)
            _ = ToastService.ShowAsync("Dismissed", c => c.SetIntend(ToastIntend.Info));
        else if (result == true)
            _ = ToastService.ShowAsync("Continue clicked", c => c.SetIntend(ToastIntend.Success));
        else if (result == false)
            _ = ToastService.ShowAsync("Cancel clicked", c => c.SetIntend(ToastIntend.Warning));
    }

    private async Task OpenDrawerFromTop()
    {
        var result = await DrawerService.ShowAsync<SampleContent>("Top", null, c => c.SetPosition(DrawerPosition.Top));
        if (result is null)
            _ = ToastService.ShowAsync("Dismissed", c => c.SetIntend(ToastIntend.Info));
        else if (result == true)
            _ = ToastService.ShowAsync("Continue clicked", c => c.SetIntend(ToastIntend.Success));
        else if (result == false)
            _ = ToastService.ShowAsync("Cancel clicked", c => c.SetIntend(ToastIntend.Warning));
    }

    private async Task OpenDrawerFromBottom()
    {
        var result = await DrawerService.ShowAsync<SampleContent>("Botom", null, c => c.SetPosition(DrawerPosition.Bottom));
        if (result is null)
            _ = ToastService.ShowAsync("Dismissed", c => c.SetIntend(ToastIntend.Info));
        else if (result == true)
            _ = ToastService.ShowAsync("Continue clicked", c => c.SetIntend(ToastIntend.Success));
        else if (result == false)
            _ = ToastService.ShowAsync("Cancel clicked", c => c.SetIntend(ToastIntend.Warning));
    }
}

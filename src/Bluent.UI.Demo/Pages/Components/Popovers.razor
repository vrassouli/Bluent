@page "/components/popovers"
@using Bluent.UI.Interops.Abstractions

<div class="p-5 py-md-10 px-md-12">
    <div class="w-100 w-md-50 m-auto">
        <h1>Popover</h1>

        <h3>Default</h3>
        <section class="p-7 rounded-5 shadow-3">
            <Popover>
                <Trigger>
                    <Button Text="Popover trigger" />
                </Trigger>
                <Surface>
                    <h4 class="mt-0">Popover</h4>
                    <div>
                        This is a sample content.
                    </div>
                </Surface>
            </Popover>
        </section>

        <h3>Internal Update Content</h3>
        <section class="p-7 rounded-5 shadow-3">
            <Popover>
                <Trigger>
                    <Button Text="Popover trigger" />
                </Trigger>
                <Surface>
                    <Bluent.UI.Demo.Pages.Components.PopoverComponents.ContentSwitch />
                </Surface>
            </Popover>
        </section>

        <h3>Trigger & Hide Events</h3>
        <section class="p-7 rounded-5 shadow-3">
            <Popover TriggerEvents="mouseenter,focus" HideEvents="mouseleave, blur">
                <Trigger>
                    <Button Text="Popover trigger" />
                </Trigger>
                <Surface>
                    <h4 class="mt-0">Popover</h4>
                    <div>
                        This is a sample content.
                    </div>
                </Surface>
            </Popover>
        </section>

        <h3>Appearance</h3>
        <section class="p-7 rounded-5 shadow-3 d-flex flex-column gap-4">
            <Popover>
                <Trigger>
                    <Button Text="Default appearance Popover" />
                </Trigger>
                <Surface>
                    <h4 class="mt-0">Popover</h4>
                    <div>
                        This is a sample content.
                    </div>
                </Surface>
            </Popover>
            <Popover Appearance="PopoverAppearance.Brand">
                <Trigger>
                    <Button Text="Brand appearance Popover" />
                </Trigger>
                <Surface>
                    <h4 class="mt-0">Popover</h4>
                    <div>
                        This is a sample content.
                    </div>
                </Surface>
            </Popover>
            <Popover Appearance="PopoverAppearance.Inverted">
                <Trigger>
                    <Button Text="Inverted appearance Popover" />
                </Trigger>
                <Surface>
                    <h4 class="mt-0">Popover</h4>
                    <div>
                        This is a sample content.
                    </div>
                </Surface>
            </Popover>
        </section>

        <h3>Manual show</h3>
        <section class="p-7 rounded-5 shadow-3 d-flex flex-column gap-4">
            <pre>
                Type 'show' to display popover
            </pre>
            <Popover @ref=_manualPopover TriggerEvents="@(null)" Placement="Placement.Bottom">
                <Trigger>
                    <TextField @ref="_cmdTextField" Value="@_showCommand" ValueChanged="OnShowCommandChanged" ValueExpression="()=>_showCommand" BindValueEvent="oninput" />
                </Trigger>
                <Surface>
                    <div>
                        You commanded to show the popover surface
                    </div>
                </Surface>
            </Popover>
        </section>

    </div>
</div>

@code {
    private string _showCommand = default!;
    private Popover? _manualPopover;
    private TextField? _cmdTextField;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && _manualPopover != null && _cmdTextField != null)
        {
            _manualPopover.SetTrigger(_cmdTextField);
        }

        base.OnAfterRender(firstRender);
    }

    private void OnShowCommandChanged(string cmd)
    {
        _showCommand = cmd;

        if (string.Compare(_showCommand, "show", true) == 0)
            _manualPopover?.Show();
        else
            _manualPopover?.Close();
    }
}

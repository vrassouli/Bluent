@import "../theme/maps/spacings.scss";
@import "../../_variables.scss";
@import "../../mixins/_breakpoints.scss";
@import "../../mixins/_utilities.scss";
@import "../../functions/maps.scss";

$utilities: () !default;
// stylelint-disable-next-line scss/dollar-variable-default
$utilities: map-merge( 
    (
        // Padding utilities
        "padding": (
            responsive: true,
            property: padding,
            class: p,
            values: to-index-map($spacings-map)
        ),
        "padding-x": (
            responsive: true,
            property: padding-right padding-left,
            class: px,
            values: to-index-map($spacings-map)
        ),
        "padding-y": (
            responsive: true,
            property: padding-top padding-bottom,
            class: py,
            values: to-index-map($spacings-map)
        ),
        "padding-top": (
            responsive: true,
            property: padding-top,
            class: pt,
            values: to-index-map($spacings-map)
        ),
        "padding-end": (
            responsive: true,
            property: padding-inline-end,
            class: pe,
            values: to-index-map($spacings-map)
        ),
        "padding-bottom": (
            responsive: true,
            property: padding-bottom,
            class: pb,
            values: to-index-map($spacings-map)
        ),
        "padding-start": (
            responsive: true,
            property: padding-inline-start,
            class: ps,
            values: to-index-map($spacings-map)
        ),
        // Margin utilities
        "margin": (
            responsive: true,
            property: margin,
            class: m,
            values: map-merge(to-index-map($spacings-map), (auto: auto))
        ),
        "margin-x": (
            responsive: true,
            property: margin-right margin-left,
            class: mx,
            values: map-merge(to-index-map($spacings-map), (auto: auto))
        ),
        "margin-y": (
            responsive: true,
            property: margin-top margin-bottom,
            class: my,
            values: map-merge(to-index-map($spacings-map), (auto: auto))
        ),
        "margin-top": (
            responsive: true,
            property: margin-top,
            class: mt,
            values: map-merge(to-index-map($spacings-map), (auto: auto))
        ),
        "margin-end": (
            responsive: true,
            property: margin-inline-end,
            class: me,
            values: map-merge(to-index-map($spacings-map), (auto: auto))
        ),
        "margin-bottom": (
            responsive: true,
            property: margin-bottom,
            class: mb,
            values: map-merge(to-index-map($spacings-map), (auto: auto))
        ),
        "margin-start": (
            responsive: true,
            property: margin-inline-start,
            class: ms,
            values: map-merge(to-index-map($spacings-map), (auto: auto))
        ),    
    ), 
    $utilities
);
// Loop over each breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {

    // Generate media query if needed
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        // Loop over each utility property
        @each $key, $utility in $utilities {
            // The utility can be disabled with `false`, thus check if the utility is a map first
            // Only proceed if responsive media queries are enabled or if it's the base media query
            @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix == "") {
                @include generate-utility($utility, $infix);
            }
        }
    }
}
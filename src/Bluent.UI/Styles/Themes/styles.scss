@import "../../node_modules/bootstrap/scss/vendor/_rfs.scss";
@import "../../node_modules/bootstrap/scss/_functions.scss";
@import "../../node_modules/bootstrap/scss/_variables.scss";
@import "../../node_modules/bootstrap/scss/_variables-dark.scss";
@import "../../node_modules/bootstrap/scss/_maps.scss";
@import "../../node_modules/bootstrap/scss/mixins/_utilities.scss";
@import "../../node_modules/bootstrap/scss/mixins/_breakpoints.scss";
@import "../../node_modules/bootstrap/scss/mixins/_container.scss";
@import "../../node_modules/bootstrap/scss/mixins/_grid.scss";

/*--- Overrides ---*/
@mixin make-col-offset($size, $columns: $grid-columns) {
    $num: divide($size, $columns);
    margin-inline-start: if($num == 0, 0, percentage($num));
}
/**** Overrides ****/

@import "styles/_animations.scss";
@import "styles/_backgrounds.scss";
@import "styles/_colors.scss";
@import "styles/_foregrounds.scss";
@import "styles/_typography.scss";
@import "styles/_utilities.scss";

.rtl {
    direction: rtl;
}

.ltr {
    direction: ltr;
}

// Loop over each breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {

    // Generate media query if needed
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        // Loop over each utility property
        @each $key, $utility in $important-utilities {
            // The utility can be disabled with `false`, thus check if the utility is a map first
            // Only proceed if responsive media queries are enabled or if it's the base media query
            @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix == "") {
                @include generate-utility($utility, $infix);
            }
        }
    }
}

$enable-important-utilities: false;

@each $breakpoint in map-keys($grid-breakpoints) {

    // Generate media query if needed
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        // Loop over each utility property
        @each $key, $utility in $non-important-utilities {
            // The utility can be disabled with `false`, thus check if the utility is a map first
            // Only proceed if responsive media queries are enabled or if it's the base media query
            @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix == "") {
                @include generate-utility($utility, $infix);
            }
        }
    }
}

@import "../../node_modules/bootstrap/scss/_containers.scss";
@import "../../node_modules/bootstrap/scss/_grid.scss";
@import "../../node_modules/bootstrap/scss/mixins/_text-truncate.scss";

.text-truncate {
    @include text-truncate;
}
